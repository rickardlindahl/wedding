{"version":3,"sources":["webpack:///./node_modules/date-fns/difference_in_calendar_days/index.js","webpack:///./node_modules/date-fns/locale/en/build_format_locale/index.js","webpack:///./node_modules/date-fns/start_of_day/index.js","webpack:///./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","webpack:///./node_modules/date-fns/start_of_iso_year/index.js","webpack:///./node_modules/date-fns/locale/en/index.js","webpack:///./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns/get_day_of_year/index.js","webpack:///./src/pages/blog/index.js","webpack:///./re/Blog.bs.js","webpack:///./node_modules/date-fns/format/index.js","webpack:///./node_modules/date-fns/is_valid/index.js","webpack:///./node_modules/date-fns/get_iso_week/index.js","webpack:///./node_modules/date-fns/get_iso_year/index.js","webpack:///./re/Post.bs.js","webpack:///./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js","webpack:///./node_modules/date-fns/start_of_year/index.js","webpack:///./node_modules/date-fns/is_date/index.js","webpack:///./node_modules/date-fns/start_of_iso_week/index.js","webpack:///./re/Utils.bs.js","webpack:///./node_modules/date-fns/start_of_week/index.js","webpack:///./node_modules/date-fns/parse/index.js"],"names":["startOfDay","module","exports","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","getTime","getTimezoneOffset","timestampRight","Math","round","buildFormattingTokensRegExp","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiemUppercase","meridiemLowercase","meridiemFull","formatters","date","getMonth","getDay","getHours","forEach","formatterToken","number","rem100","ordinal","formattingTokensRegExp","parse","dirtyDate","setHours","distanceInWordsLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","localize","token","count","options","result","replace","addSuffix","comparison","getISOYear","startOfISOWeek","year","fourthOfJanuary","Date","setFullYear","buildDistanceInWordsLocale","buildFormatLocale","distanceInWords","format","baseTimezoneOffset","setSeconds","startOfYear","differenceInCalendarDays","BlogPage","query","render","data","posts","allMarkdownRemark","edges","map","edge","node","$$Array","require","React","Post$ReactTemplate","Blog","Props","renderPosts","post","createElement","make","key","id","undefined","$$default","str","prim","default","__esModule","getDayOfYear","getISOWeek","isValid","enLocale","addLeadingZeros","ceil","getDate","getFullYear","substr","String","hours","getMinutes","getSeconds","floor","getMilliseconds","formatTimezone","removeFormattingTokens","input","match","offset","delimeter","sign","absOffset","abs","minutes","targetLength","output","toString","length","dirtyFormatStr","dirtyOptions","formatStr","locale","localeFormatters","i","formatter","array","Function","buildFormatFn","formatFn","isDate","isNaN","TypeError","call","startOfISOYear","diff","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","Css","Gatsby","Utils$ReactTemplate","article","style","marginBottom","px","link","textDecoration","hover","textDecorationColor","red","h2","color","p","black","darkgray","Styles","className","Link","to","frontmatter","path","children","title","excerpt","formatDate","commonFormatterKeys","formatterKeys","hasOwnProperty","push","formattingTokens","concat","sort","reverse","RegExp","join","cleanDate","argument","startOfWeek","weekStartsOn","Format","isoDateString","Number","day","setDate","getTimezoneOffsetInMilliseconds","parseTokenDateTimeDelimeter","parseTokenPlainTime","parseTokenYY","parseTokensYYY","parseTokenYYYY","parseTokensYYYYY","parseTokenMM","parseTokenDDD","parseTokenMMDD","parseTokenWww","parseTokenWwwD","parseTokenHH","parseTokenHHMM","parseTokenHHMMSS","parseTokenTimezone","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","dayOfISOYear","isoYear","week","setUTCFullYear","getUTCDay","setUTCDate","getUTCDate","additionalDigits","dateStrings","dateString","timeString","split","test","exec","time","timezone","splitDateString","parseYearResult","parseTokenYYY","parseTokenYYYYY","yearString","parseInt","restDateString","slice","centuryString","parseYear","month","dayOfYear","dayOfWeek","parseDate","timestamp","parseFloat","seconds","parseTime","timezoneString","absoluteOffset","parseTimezone","fullTime","fullTimeDate","fullTimeDateNextDay","offsetDiff"],"mappings":"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","file":"component---src-pages-blog-index-js-afa3d30ba0a0419064cc.js","sourcesContent":["var startOfDay = require('../start_of_day/index.js');\n\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n */\n\nfunction differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n  var timestampRight = startOfDayRight.getTime() - startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE; // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}\n\nmodule.exports = differenceInCalendarDays;","require(\"core-js/modules/es6.array.for-each\");\n\nvar buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js');\n\nfunction buildFormatLocale() {\n  // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  var meridiemUppercase = ['AM', 'PM'];\n  var meridiemLowercase = ['am', 'pm'];\n  var meridiemFull = ['a.m.', 'p.m.'];\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function MMM(date) {\n      return months3char[date.getMonth()];\n    },\n    // Month: January, February, ..., December\n    'MMMM': function MMMM(date) {\n      return monthsFull[date.getMonth()];\n    },\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function dd(date) {\n      return weekdays2char[date.getDay()];\n    },\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function ddd(date) {\n      return weekdays3char[date.getDay()];\n    },\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function dddd(date) {\n      return weekdaysFull[date.getDay()];\n    },\n    // AM, PM\n    'A': function A(date) {\n      return date.getHours() / 12 >= 1 ? meridiemUppercase[1] : meridiemUppercase[0];\n    },\n    // am, pm\n    'a': function a(date) {\n      return date.getHours() / 12 >= 1 ? meridiemLowercase[1] : meridiemLowercase[0];\n    },\n    // a.m., p.m.\n    'aa': function aa(date) {\n      return date.getHours() / 12 >= 1 ? meridiemFull[1] : meridiemFull[0];\n    }\n  }; // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date));\n    };\n  });\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  };\n}\n\nfunction ordinal(number) {\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nmodule.exports = buildFormatLocale;","var parse = require('../parse/index.js');\n/**\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\n\nfunction startOfDay(dirtyDate) {\n  var date = parse(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\nmodule.exports = startOfDay;","require(\"core-js/modules/es6.regexp.replace\");\n\nfunction buildDistanceInWordsLocale() {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n    halfAMinute: 'half a minute',\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  };\n\n  function localize(token, count, options) {\n    options = options || {};\n    var result;\n\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token];\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one;\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count);\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result;\n      } else {\n        return result + ' ago';\n      }\n    }\n\n    return result;\n  }\n\n  return {\n    localize: localize\n  };\n}\n\nmodule.exports = buildDistanceInWordsLocale;","var getISOYear = require('../get_iso_year/index.js');\n\nvar startOfISOWeek = require('../start_of_iso_week/index.js');\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\n\nfunction startOfISOYear(dirtyDate) {\n  var year = getISOYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}\n\nmodule.exports = startOfISOYear;","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js');\n\nvar buildFormatLocale = require('./build_format_locale/index.js');\n/**\n * @category Locales\n * @summary English locale.\n */\n\n\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n};","var MILLISECONDS_IN_MINUTE = 60000;\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nmodule.exports = function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = date.getTimezoneOffset();\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n};","var parse = require('../parse/index.js');\n\nvar startOfYear = require('../start_of_year/index.js');\n\nvar differenceInCalendarDays = require('../difference_in_calendar_days/index.js');\n/**\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\n\nfunction getDayOfYear(dirtyDate) {\n  var date = parse(dirtyDate);\n  var diff = differenceInCalendarDays(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\nmodule.exports = getDayOfYear;","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Layout from '../../components/layout'\nimport Blog from '../../../re/Blog.bs'\n\nconst BlogPage = () => (\n  <Layout>\n    <StaticQuery\n      query={graphql`\n        query AllMarkdownRemark {\n          allMarkdownRemark {\n            edges {\n              node {\n                tableOfContents(pathToSlugField: \"frontmatter.path\")\n                frontmatter {\n                  path\n                  title\n                  date\n                }\n                id\n                excerpt\n              }\n            }\n          }\n        }\n      `}\n      render={data => {\n        const posts = data.allMarkdownRemark.edges.map(edge => edge.node)\n        return <Blog posts={posts} />\n      }}\n    />\n  </Layout>\n)\n\nexport default BlogPage\n","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\nvar React = require(\"react\");\nvar Post$ReactTemplate = require(\"./Post.bs.js\");\n\nfunction str(prim) {\n  return prim;\n}\n\nfunction Blog(Props) {\n  var posts = Props.posts;\n  var renderPosts = $$Array.map((function (post) {\n          return React.createElement(Post$ReactTemplate.make, {\n                      post: post,\n                      key: post.id\n                    });\n        }), posts);\n  return React.createElement(\"div\", undefined, React.createElement(\"h1\", undefined, \"Blog\"), renderPosts);\n}\n\nvar make = Blog;\n\nvar $$default = Blog;\n\nexports.str = str;\nexports.make = make;\nexports.$$default = $$default;\nexports.default = $$default;\nexports.__esModule = true;\n/* react Not a pure module */\n","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nvar getDayOfYear = require('../get_day_of_year/index.js');\n\nvar getISOWeek = require('../get_iso_week/index.js');\n\nvar getISOYear = require('../get_iso_year/index.js');\n\nvar parse = require('../parse/index.js');\n\nvar isValid = require('../is_valid/index.js');\n\nvar enLocale = require('../locale/en/index.js');\n/**\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format.\n *\n * Accepted tokens:\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens\n * @param {Object} [options] - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/DD/YYYY'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * var eoLocale = require('date-fns/locale/eo')\n * var result = format(\n *   new Date(2014, 6, 2),\n *   'Do [de] MMMM YYYY',\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n */\n\n\nfunction format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFormatters = enLocale.format.formatters;\n  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp;\n\n  if (locale && locale.format && locale.format.formatters) {\n    localeFormatters = locale.format.formatters;\n\n    if (locale.format.formattingTokensRegExp) {\n      formattingTokensRegExp = locale.format.formattingTokensRegExp;\n    }\n  }\n\n  var date = parse(dirtyDate);\n\n  if (!isValid(date)) {\n    return 'Invalid Date';\n  }\n\n  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp);\n  return formatFn(date);\n}\n\nvar formatters = {\n  // Month: 1, 2, ..., 12\n  'M': function M(date) {\n    return date.getMonth() + 1;\n  },\n  // Month: 01, 02, ..., 12\n  'MM': function MM(date) {\n    return addLeadingZeros(date.getMonth() + 1, 2);\n  },\n  // Quarter: 1, 2, 3, 4\n  'Q': function Q(date) {\n    return Math.ceil((date.getMonth() + 1) / 3);\n  },\n  // Day of month: 1, 2, ..., 31\n  'D': function D(date) {\n    return date.getDate();\n  },\n  // Day of month: 01, 02, ..., 31\n  'DD': function DD(date) {\n    return addLeadingZeros(date.getDate(), 2);\n  },\n  // Day of year: 1, 2, ..., 366\n  'DDD': function DDD(date) {\n    return getDayOfYear(date);\n  },\n  // Day of year: 001, 002, ..., 366\n  'DDDD': function DDDD(date) {\n    return addLeadingZeros(getDayOfYear(date), 3);\n  },\n  // Day of week: 0, 1, ..., 6\n  'd': function d(date) {\n    return date.getDay();\n  },\n  // Day of ISO week: 1, 2, ..., 7\n  'E': function E(date) {\n    return date.getDay() || 7;\n  },\n  // ISO week: 1, 2, ..., 53\n  'W': function W(date) {\n    return getISOWeek(date);\n  },\n  // ISO week: 01, 02, ..., 53\n  'WW': function WW(date) {\n    return addLeadingZeros(getISOWeek(date), 2);\n  },\n  // Year: 00, 01, ..., 99\n  'YY': function YY(date) {\n    return addLeadingZeros(date.getFullYear(), 4).substr(2);\n  },\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': function YYYY(date) {\n    return addLeadingZeros(date.getFullYear(), 4);\n  },\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': function GG(date) {\n    return String(getISOYear(date)).substr(2);\n  },\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': function GGGG(date) {\n    return getISOYear(date);\n  },\n  // Hour: 0, 1, ... 23\n  'H': function H(date) {\n    return date.getHours();\n  },\n  // Hour: 00, 01, ..., 23\n  'HH': function HH(date) {\n    return addLeadingZeros(date.getHours(), 2);\n  },\n  // Hour: 1, 2, ..., 12\n  'h': function h(date) {\n    var hours = date.getHours();\n\n    if (hours === 0) {\n      return 12;\n    } else if (hours > 12) {\n      return hours % 12;\n    } else {\n      return hours;\n    }\n  },\n  // Hour: 01, 02, ..., 12\n  'hh': function hh(date) {\n    return addLeadingZeros(formatters['h'](date), 2);\n  },\n  // Minute: 0, 1, ..., 59\n  'm': function m(date) {\n    return date.getMinutes();\n  },\n  // Minute: 00, 01, ..., 59\n  'mm': function mm(date) {\n    return addLeadingZeros(date.getMinutes(), 2);\n  },\n  // Second: 0, 1, ..., 59\n  's': function s(date) {\n    return date.getSeconds();\n  },\n  // Second: 00, 01, ..., 59\n  'ss': function ss(date) {\n    return addLeadingZeros(date.getSeconds(), 2);\n  },\n  // 1/10 of second: 0, 1, ..., 9\n  'S': function S(date) {\n    return Math.floor(date.getMilliseconds() / 100);\n  },\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': function SS(date) {\n    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2);\n  },\n  // Millisecond: 000, 001, ..., 999\n  'SSS': function SSS(date) {\n    return addLeadingZeros(date.getMilliseconds(), 3);\n  },\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': function Z(date) {\n    return formatTimezone(date.getTimezoneOffset(), ':');\n  },\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': function ZZ(date) {\n    return formatTimezone(date.getTimezoneOffset());\n  },\n  // Seconds timestamp: 512969520\n  'X': function X(date) {\n    return Math.floor(date.getTime() / 1000);\n  },\n  // Milliseconds timestamp: 512969520900\n  'x': function x(date) {\n    return date.getTime();\n  }\n};\n\nfunction buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp) {\n  var array = formatStr.match(formattingTokensRegExp);\n  var length = array.length;\n  var i;\n  var formatter;\n\n  for (i = 0; i < length; i++) {\n    formatter = localeFormatters[array[i]] || formatters[array[i]];\n\n    if (formatter) {\n      array[i] = formatter;\n    } else {\n      array[i] = removeFormattingTokens(array[i]);\n    }\n  }\n\n  return function (date) {\n    var output = '';\n\n    for (var i = 0; i < length; i++) {\n      if (array[i] instanceof Function) {\n        output += array[i](date, formatters);\n      } else {\n        output += array[i];\n      }\n    }\n\n    return output;\n  };\n}\n\nfunction removeFormattingTokens(input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '');\n  }\n\n  return input.replace(/\\\\/g, '');\n}\n\nfunction formatTimezone(offset, delimeter) {\n  delimeter = delimeter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2);\n}\n\nfunction addLeadingZeros(number, targetLength) {\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return output;\n}\n\nmodule.exports = format;","var isDate = require('../is_date/index.js');\n/**\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {Date} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} argument must be an instance of Date\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\n\nfunction isValid(dirtyDate) {\n  if (isDate(dirtyDate)) {\n    return !isNaN(dirtyDate);\n  } else {\n    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date');\n  }\n}\n\nmodule.exports = isValid;","var parse = require('../parse/index.js');\n\nvar startOfISOWeek = require('../start_of_iso_week/index.js');\n\nvar startOfISOYear = require('../start_of_iso_year/index.js');\n\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nfunction getISOWeek(dirtyDate) {\n  var date = parse(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\n\nmodule.exports = getISOWeek;","var parse = require('../parse/index.js');\n\nvar startOfISOWeek = require('../start_of_iso_week/index.js');\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\n\nfunction getISOYear(dirtyDate) {\n  var date = parse(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\nmodule.exports = getISOYear;","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Css = require(\"bs-css/src/Css.js\");\nvar React = require(\"react\");\nvar Gatsby = require(\"gatsby\");\nvar Utils$ReactTemplate = require(\"./Utils.bs.js\");\n\nfunction str(prim) {\n  return prim;\n}\n\nvar article = Css.style(/* :: */[\n      Css.marginBottom(Css.px(32)),\n      /* [] */0\n    ]);\n\nvar link = Css.style(/* :: */[\n      Css.textDecoration(/* none */-922086728),\n      /* :: */[\n        Css.hover(/* :: */[\n              Css.textDecoration(/* underline */131142924),\n              /* :: */[\n                Css.textDecorationColor(Css.red),\n                /* [] */0\n              ]\n            ]),\n        /* [] */0\n      ]\n    ]);\n\nvar h2 = Css.style(/* :: */[\n      Css.color(Css.red),\n      /* [] */0\n    ]);\n\nvar p = Css.style(/* :: */[\n      Css.color(Css.black),\n      /* [] */0\n    ]);\n\nvar date = Css.style(/* :: */[\n      Css.color(Css.darkgray),\n      /* [] */0\n    ]);\n\nvar Styles = {\n  article: article,\n  link: link,\n  h2: h2,\n  p: p,\n  date: date\n};\n\nfunction Post(Props) {\n  var post = Props.post;\n  return React.createElement(\"article\", {\n              className: article\n            }, React.createElement(Gatsby.Link, {\n                  to: \"/blog/\" + post.frontmatter.path,\n                  className: link,\n                  children: React.createElement(\"h2\", {\n                        className: h2\n                      }, post.frontmatter.title)\n                }), React.createElement(\"p\", {\n                  className: p\n                }, post.excerpt), React.createElement(\"small\", {\n                  className: date\n                }, Utils$ReactTemplate.formatDate(post.frontmatter.date)));\n}\n\nvar make = Post;\n\nexports.str = str;\nexports.Styles = Styles;\nexports.make = make;\n/* article Not a pure module */\n","require(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar commonFormatterKeys = ['M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd', 'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG', 'H', 'HH', 'h', 'hh', 'm', 'mm', 's', 'ss', 'S', 'SS', 'SSS', 'Z', 'ZZ', 'X', 'x'];\n\nfunction buildFormattingTokensRegExp(formatters) {\n  var formatterKeys = [];\n\n  for (var key in formatters) {\n    if (formatters.hasOwnProperty(key)) {\n      formatterKeys.push(key);\n    }\n  }\n\n  var formattingTokens = commonFormatterKeys.concat(formatterKeys).sort().reverse();\n  var formattingTokensRegExp = new RegExp('(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g');\n  return formattingTokensRegExp;\n}\n\nmodule.exports = buildFormattingTokensRegExp;","var parse = require('../parse/index.js');\n/**\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\n\nfunction startOfYear(dirtyDate) {\n  var cleanDate = parse(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\nmodule.exports = startOfYear;","/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate(argument) {\n  return argument instanceof Date;\n}\n\nmodule.exports = isDate;","var startOfWeek = require('../start_of_week/index.js');\n/**\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\n\nfunction startOfISOWeek(dirtyDate) {\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}\n\nmodule.exports = startOfISOWeek;","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Format = require(\"date-fns/format\");\n\nfunction formatDate(isoDateString) {\n  return Format(new Date(isoDateString), \"dddd, MMMM D, YYYY\");\n}\n\nexports.formatDate = formatDate;\n/* date-fns/format Not a pure module */\n","require(\"core-js/modules/es6.number.constructor\");\n\nvar parse = require('../parse/index.js');\n/**\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Mon Sep 01 2014 00:00:00\n */\n\n\nfunction startOfWeek(dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? Number(dirtyOptions.weekStartsOn) || 0 : 0;\n  var date = parse(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\nmodule.exports = startOfWeek;","require(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar getTimezoneOffsetInMilliseconds = require('../_lib/getTimezoneOffsetInMilliseconds/index.js');\n\nvar isDate = require('../is_date/index.js');\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar parseTokenDateTimeDelimeter = /[T ]/;\nvar parseTokenPlainTime = /:/; // year tokens\n\nvar parseTokenYY = /^(\\d{2})$/;\nvar parseTokensYYY = [/^([+-]\\d{2})$/, // 0 additional digits\n/^([+-]\\d{3})$/, // 1 additional digit\n/^([+-]\\d{4})$/ // 2 additional digits\n];\nvar parseTokenYYYY = /^(\\d{4})/;\nvar parseTokensYYYYY = [/^([+-]\\d{4})/, // 0 additional digits\n/^([+-]\\d{5})/, // 1 additional digit\n/^([+-]\\d{6})/ // 2 additional digits\n]; // date tokens\n\nvar parseTokenMM = /^-(\\d{2})$/;\nvar parseTokenDDD = /^-?(\\d{3})$/;\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/;\nvar parseTokenWww = /^-?W(\\d{2})$/;\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/; // time tokens\n\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/;\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/;\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/; // timezone tokens\n\nvar parseTokenTimezone = /([Z+-].*)$/;\nvar parseTokenTimezoneZ = /^(Z)$/;\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/;\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/;\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nfunction parse(argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument !== 'string') {\n    return new Date(argument);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits;\n\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS;\n  } else {\n    additionalDigits = Number(additionalDigits);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE;\n    } else {\n      var fullTime = timestamp + time;\n      var fullTimeDate = new Date(fullTime);\n      offset = getTimezoneOffsetInMilliseconds(fullTimeDate); // Adjust time when it's coming from DST\n\n      var fullTimeDateNextDay = new Date(fullTime);\n      fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1);\n      var offsetDiff = getTimezoneOffsetInMilliseconds(fullTimeDateNextDay) - getTimezoneOffsetInMilliseconds(fullTimeDate);\n\n      if (offsetDiff > 0) {\n        offset += offsetDiff;\n      }\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(argument);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(parseTokenDateTimeDelimeter);\n  var timeString;\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits];\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = parseTokenMM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = parseTokenDDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // YYYY-MM-DD or YYYYMMDD\n\n\n  token = parseTokenMMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = parseTokenWww.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    return dayOfISOYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = parseTokenWwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n    return dayOfISOYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = parseTokenHH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = parseTokenHHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = parseTokenHHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction parseTimezone(timezoneString) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = parseTokenTimezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  } // ±hh\n\n\n  token = parseTokenTimezoneHH.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = parseTokenTimezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  return 0;\n}\n\nfunction dayOfISOYear(isoYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\nmodule.exports = parse;"],"sourceRoot":""}