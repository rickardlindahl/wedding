{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/how-types-improve-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby ReasonML Starter","author":"Ian Wilson"}},"markdownRemark":{"id":"c81a57f6-dea0-57d0-a86b-60a0c8af4c7f","excerpt":"Vanilla JavaScript is untyped by nature, some will call it “smart” because it is able to figure out what is a number or a string. This makes…","html":"<p>Vanilla JavaScript is untyped by nature, some will call it “smart” because it is able to figure out what is a number or a string.</p>\n<p>This makes it easier to run JavaScript code, it simply needs to be executed in a browser or Node.js runtime. However, its vulnerable to numerous runtime errors that can spoil your user experience.</p>\n<p>If you’ve ever experienced the following, you would benefit from adopting a type system.</p>\n<ul>\n<li>After fetching a list of data you may find that a certain field doesn’t exist on one of the records, causing the app to crash unless explicitly handled.</li>\n<li>An instance of a class you imported doesn’t have a method you’re trying to invoke.</li>\n<li>Your IDE doesn’t know what methods and properties are available, so it cannot easily assist you with autocomplete.</li>\n<li>Difficulty reasoning about code, type systems at a glance make it easier to refactor</li>\n</ul>\n<h2>Flow, TypeScript, or ReasonML</h2>\n<p>If you have an existing codebase that you wish to make bulletproof, with respect to type errors, you could try adopting Flow or TypeScript. They have a fairly similar syntax.</p>","frontmatter":{"title":"How a Type System Improves your JavaScript Code","date":"October 27, 2018","path":"how-types-improve-javascript"}}},"pageContext":{"slug":"/blog/how-types-improve-javascript/"}}}